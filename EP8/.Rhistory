separados_sample <- get_sample_hogares(separados)
casados_sample <- get_sample_hogares(casados)
solteros_sample <- get_sample_hogares(solteros)
divorciados_sample <- get_sample_hogares(divorciados)
viudos_sample <- get_sample_hogares(viudos)
# Si solo necesitas la lista de edades, puedes extraerlas asÃ­
separados_edades <- separados_sample %>% pull(edad)
casados_edades <- casados_sample %>% pull(edad)
solteros_edades <- solteros_sample %>% pull(edad)
divorciados_edades <- divorciados_sample %>% pull(edad)
viudos_edades <- viudos_sample %>% pull(edad)
# Datos
# Muestras
separados <- datos %>% filter(ecivil == "Separado(a)")
casados <- datos %>% filter(ecivil == "Casado(a)")
solteros <- datos %>% filter(ecivil == "Soltero(a)")
divorciados <- datos %>% filter(ecivil == "Divorciado (a)")
viudos <- datos %>% filter(ecivil == "Viudo(a)")
get_sample_hogares <- function(data) {
data %>%
group_by(id.vivienda) %>%
summarise(edad = first(edad), .groups = 'drop') %>%
sample_n(299)
}
# muestras iguales
separados_sample <- get_sample_hogares(separados)
casados_sample <- get_sample_hogares(casados)
solteros_sample <- get_sample_hogares(solteros)
divorciados_sample <- get_sample_hogares(divorciados)
viudos_sample <- get_sample_hogares(viudos)
# lista edades
separados_edades <- separados_sample %>% pull(edad)
casados_edades <- casados_sample %>% pull(edad)
solteros_edades <- solteros_sample %>% pull(edad)
divorciados_edades <- divorciados_sample %>% pull(edad)
viudos_edades <- viudos_sample %>% pull(edad)
# Comportamiento de datos
instancia <- factor(1:299)
datos_anchos <- data.frame(instancia, separados_edades, casados_edades, solteros_edades, divorciados_edades, viudos_edades)
# Datos
# Muestras
separados <- datos %>% filter(ecivil == "Separado(a)")
casados <- datos %>% filter(ecivil == "Casado(a)")
solteros <- datos %>% filter(ecivil == "Soltero(a)")
divorciados <- datos %>% filter(ecivil == "Divorciado (a)")
viudos <- datos %>% filter(ecivil == "Viudo(a)")
get_sample_hogares <- function(data) {
data %>%
group_by(id.vivienda) %>%
summarise(edad = first(edad), .groups = 'drop') %>%
sample_n(299)
}
# muestras iguales
separados_sample <- get_sample_hogares(separados)
casados_sample <- get_sample_hogares(casados)
solteros_sample <- get_sample_hogares(solteros)
divorciados_sample <- get_sample_hogares(divorciados)
viudos_sample <- get_sample_hogares(viudos)
# lista edades
separados_edades <- separados_sample %>% pull(edad)
casados_edades <- casados_sample %>% pull(edad)
solteros_edades <- solteros_sample %>% pull(edad)
divorciados_edades <- divorciados_sample %>% pull(edad)
viudos_edades <- viudos_sample %>% pull(edad)
# Comportamiento de datos
instancia <- factor(1:299)
datos_anchos <- data.frame(instancia, separados_edades, casados_edades, solteros_edades, divorciados_edades, viudos_edades)
datos_largos <- datos_anchos %> % pivot_longer (c(" Separados ", " Casados ",
" Solteros ", "Divorciados", "Viudos") ,
names_to = " Estado Civil ",
values_to = " Edad ")
# Datos
# Muestras
separados <- datos %>% filter(ecivil == "Separado(a)")
casados <- datos %>% filter(ecivil == "Casado(a)")
solteros <- datos %>% filter(ecivil == "Soltero(a)")
divorciados <- datos %>% filter(ecivil == "Divorciado (a)")
viudos <- datos %>% filter(ecivil == "Viudo(a)")
get_sample_hogares <- function(data) {
data %>%
group_by(id.vivienda) %>%
summarise(edad = first(edad), .groups = 'drop') %>%
sample_n(299)
}
# muestras iguales
separados_sample <- get_sample_hogares(separados)
casados_sample <- get_sample_hogares(casados)
solteros_sample <- get_sample_hogares(solteros)
divorciados_sample <- get_sample_hogares(divorciados)
viudos_sample <- get_sample_hogares(viudos)
# lista edades
separados_edades <- separados_sample %>% pull(edad)
casados_edades <- casados_sample %>% pull(edad)
solteros_edades <- solteros_sample %>% pull(edad)
divorciados_edades <- divorciados_sample %>% pull(edad)
viudos_edades <- viudos_sample %>% pull(edad)
# Comportamiento de datos
instancia <- factor(1:299)
datos_anchos <- data.frame(instancia, separados_edades, casados_edades, solteros_edades, divorciados_edades, viudos_edades)
datos_largos <- datos_anchos %>% pivot_longer (c(" Separados ", " Casados ",
" Solteros ", "Divorciados", "Viudos") ,
names_to = " Estado Civil ",
values_to = " Edad ")
# Datos
# Muestras
separados <- datos %>% filter(ecivil == "Separado(a)")
casados <- datos %>% filter(ecivil == "Casado(a)")
solteros <- datos %>% filter(ecivil == "Soltero(a)")
divorciados <- datos %>% filter(ecivil == "Divorciado (a)")
viudos <- datos %>% filter(ecivil == "Viudo(a)")
get_sample_hogares <- function(data) {
data %>%
group_by(id.vivienda) %>%
summarise(edad = first(edad), .groups = 'drop') %>%
sample_n(299)
}
# muestras iguales
separados_sample <- get_sample_hogares(separados)
casados_sample <- get_sample_hogares(casados)
solteros_sample <- get_sample_hogares(solteros)
divorciados_sample <- get_sample_hogares(divorciados)
viudos_sample <- get_sample_hogares(viudos)
# lista edades
separados_edades <- separados_sample %>% pull(edad)
casados_edades <- casados_sample %>% pull(edad)
solteros_edades <- solteros_sample %>% pull(edad)
divorciados_edades <- divorciados_sample %>% pull(edad)
viudos_edades <- viudos_sample %>% pull(edad)
# Comportamiento de datos
instancia <- factor(1:299)
datos_anchos <- data.frame(separados_edades, casados_edades, solteros_edades, divorciados_edades, viudos_edades)
datos_largos <- datos_anchos %>% pivot_longer (c(" Separados ", " Casados ",
"Solteros", "Divorciados", "Viudos") ,
names_to = " Estado Civil ",
values_to = " Edad ")
# Datos
# Muestras
separados <- datos %>% filter(ecivil == "Separado(a)")
casados <- datos %>% filter(ecivil == "Casado(a)")
solteros <- datos %>% filter(ecivil == "Soltero(a)")
divorciados <- datos %>% filter(ecivil == "Divorciado (a)")
viudos <- datos %>% filter(ecivil == "Viudo(a)")
get_sample_hogares <- function(data) {
data %>%
group_by(id.vivienda) %>%
summarise(edad = first(edad), .groups = 'drop') %>%
sample_n(299)
}
# muestras iguales
separados_sample <- get_sample_hogares(separados)
casados_sample <- get_sample_hogares(casados)
solteros_sample <- get_sample_hogares(solteros)
divorciados_sample <- get_sample_hogares(divorciados)
viudos_sample <- get_sample_hogares(viudos)
# lista edades
separados_edades <- separados_sample %>% pull(edad)
casados_edades <- casados_sample %>% pull(edad)
solteros_edades <- solteros_sample %>% pull(edad)
divorciados_edades <- divorciados_sample %>% pull(edad)
viudos_edades <- viudos_sample %>% pull(edad)
# Comportamiento de datos
instancia <- factor(1:299)
datos_anchos <- data.frame(separados_edades, casados_edades, solteros_edades, divorciados_edades, viudos_edades)
datos_largos <- datos_anchos %>% pivot_longer (c(" separados_edades ", " casados_edades ",
"solteros_edades", "divorciados_edades", "viudos_edades") ,
names_to = " Estado Civil ",
values_to = " Edad ")
# Datos
# Muestras
separados <- datos %>% filter(ecivil == "Separado(a)")
casados <- datos %>% filter(ecivil == "Casado(a)")
solteros <- datos %>% filter(ecivil == "Soltero(a)")
divorciados <- datos %>% filter(ecivil == "Divorciado (a)")
viudos <- datos %>% filter(ecivil == "Viudo(a)")
get_sample_hogares <- function(data) {
data %>%
group_by(id.vivienda) %>%
summarise(edad = first(edad), .groups = 'drop') %>%
sample_n(299)
}
# muestras iguales
separados_sample <- get_sample_hogares(separados)
casados_sample <- get_sample_hogares(casados)
solteros_sample <- get_sample_hogares(solteros)
divorciados_sample <- get_sample_hogares(divorciados)
viudos_sample <- get_sample_hogares(viudos)
# lista edades
separados_edades <- separados_sample$edad
casados_edades <- casados_sample$edad
solteros_edades <- solteros_sample$edad
divorciados_edades <- divorciados_sample$edad)
# Datos
# Muestras
separados <- datos %>% filter(ecivil == "Separado(a)")
casados <- datos %>% filter(ecivil == "Casado(a)")
solteros <- datos %>% filter(ecivil == "Soltero(a)")
divorciados <- datos %>% filter(ecivil == "Divorciado (a)")
viudos <- datos %>% filter(ecivil == "Viudo(a)")
get_sample_hogares <- function(data) {
data %>%
group_by(id.vivienda) %>%
summarise(edad = first(edad), .groups = 'drop') %>%
sample_n(299)
}
# muestras iguales
separados_sample <- get_sample_hogares(separados)
casados_sample <- get_sample_hogares(casados)
solteros_sample <- get_sample_hogares(solteros)
divorciados_sample <- get_sample_hogares(divorciados)
viudos_sample <- get_sample_hogares(viudos)
# lista edades
separados_edades <- separados_sample$edad
casados_edades <- casados_sample$edad
solteros_edades <- solteros_sample$edad
divorciados_edades <- divorciados_sample$edad
viudos_edades <- viudos_sample$edad
# Comportamiento de datos
instancia <- factor(1:299)
datos_anchos <- data.frame(separados_edades, casados_edades, solteros_edades, divorciados_edades, viudos_edades)
datos_largos <- datos_anchos %>% pivot_longer (c(" Separados ", " Casados ",
"Solteros", "Divorciados", "Viudos") ,
names_to = " Estado Civil ",
values_to = " Edad ")
datos_anchos <- data.frame(separados_edades, casados_edades, solteros_edades, divorciados_edades, viudos_edades)
datos_largos <- datos_anchos %>% pivot_longer (c("Separados", "Casados",
"Solteros", "Divorciados", "Viudos") ,
names_to = " Estado Civil ",
values_to = " Edad ")
View(datos_anchos)
# Datos
# Muestras
separados <- datos %>% filter(ecivil == "Separado(a)")
casados <- datos %>% filter(ecivil == "Casado(a)")
solteros <- datos %>% filter(ecivil == "Soltero(a)")
divorciados <- datos %>% filter(ecivil == "Divorciado (a)")
viudos <- datos %>% filter(ecivil == "Viudo(a)")
get_sample_hogares <- function(data) {
data %>%
group_by(id.vivienda) %>%
summarise(edad = first(edad), .groups = 'drop') %>%
sample_n(299)
}
# muestras iguales
separados_sample <- get_sample_hogares(separados)
casados_sample <- get_sample_hogares(casados)
solteros_sample <- get_sample_hogares(solteros)
divorciados_sample <- get_sample_hogares(divorciados)
viudos_sample <- get_sample_hogares(viudos)
# lista edades
separados_edades <- separados_sample$edad
casados_edades <- casados_sample$edad
solteros_edades <- solteros_sample$edad
divorciados_edades <- divorciados_sample$edad
viudos_edades <- viudos_sample$edad
# Comportamiento de datos
instancia <- factor(1:299)
datos_anchos <- data.frame(separados_edades, casados_edades, solteros_edades, divorciados_edades, viudos_edades)
datos_largos <- datos_anchos %>% pivot_longer (c("separados_edades", "casados_edades", "solteros_edades", "divorciados_edades", "viudos_edades") ,
names_to = " Estado Civil ",
values_to = " Edad ")
datos_largos [[" Estado Civil "]] <- factor ( datos_largos [[" Estado Civil "]])
# Datos
# Muestras
separados <- datos %>% filter(ecivil == "Separado(a)")
casados <- datos %>% filter(ecivil == "Casado(a)")
solteros <- datos %>% filter(ecivil == "Soltero(a)")
divorciados <- datos %>% filter(ecivil == "Divorciado (a)")
viudos <- datos %>% filter(ecivil == "Viudo(a)")
get_sample_hogares <- function(data) {
data %>%
group_by(id.vivienda) %>%
summarise(edad = first(edad), .groups = 'drop') %>%
sample_n(299)
}
# muestras iguales
separados_sample <- get_sample_hogares(separados)
casados_sample <- get_sample_hogares(casados)
solteros_sample <- get_sample_hogares(solteros)
divorciados_sample <- get_sample_hogares(divorciados)
viudos_sample <- get_sample_hogares(viudos)
# lista edades
separados_edades <- separados_sample$edad
casados_edades <- casados_sample$edad
solteros_edades <- solteros_sample$edad
divorciados_edades <- divorciados_sample$edad
viudos_edades <- viudos_sample$edad
# Comportamiento de datos
instancia <- factor(1:299)
datos_anchos <- data.frame(separados_edades, casados_edades, solteros_edades, divorciados_edades, viudos_edades)
datos_largos <- datos_anchos %>% pivot_longer (c("separados_edades", "casados_edades", "solteros_edades", "divorciados_edades", "viudos_edades") ,
names_to = " Estado Civil ",
values_to = " Edad ")
datos_largos [[" Estado Civil "]] <- factor ( datos_largos [[" Estado Civil "]])
g <- ggqqplot ( datos_largos , " Edad ", facet.by = " Estado Civil ", color = " Estado Civil ")
g
# Datos
set.seed(691)
# Muestras
separados <- datos %>% filter(ecivil == "Separado(a)")
casados <- datos %>% filter(ecivil == "Casado(a)")
solteros <- datos %>% filter(ecivil == "Soltero(a)")
divorciados <- datos %>% filter(ecivil == "Divorciado (a)")
viudos <- datos %>% filter(ecivil == "Viudo(a)")
get_sample_hogares <- function(data) {
data %>%
group_by(id.vivienda) %>%
summarise(edad = first(edad), .groups = 'drop') %>%
sample_n(299)
}
# muestras iguales
separados_sample <- get_sample_hogares(separados)
casados_sample <- get_sample_hogares(casados)
solteros_sample <- get_sample_hogares(solteros)
divorciados_sample <- get_sample_hogares(divorciados)
viudos_sample <- get_sample_hogares(viudos)
# lista edades
separados_edades <- separados_sample$edad
casados_edades <- casados_sample$edad
solteros_edades <- solteros_sample$edad
divorciados_edades <- divorciados_sample$edad
viudos_edades <- viudos_sample$edad
# Comportamiento de datos
instancia <- factor(1:299)
datos_anchos <- data.frame(separados_edades, casados_edades, solteros_edades, divorciados_edades, viudos_edades)
datos_largos <- datos_anchos %>% pivot_longer (c("separados_edades", "casados_edades", "solteros_edades", "divorciados_edades", "viudos_edades") ,
names_to = " Estado Civil ",
values_to = " Edad ")
datos_largos [[" Estado Civil "]] <- factor ( datos_largos [[" Estado Civil "]])
g <- ggqqplot ( datos_largos , " Edad ", facet.by = " Estado Civil ", color = " Estado Civil ")
g
bootstrap_edades <- function(edades, n_replicas) {
bootstrap_resultados <- matrix(nrow = n_replicas, ncol = length(edades))
for (i in 1:n_replicas) {
muestra_bootstrap <- sample(edades, replace = TRUE)
bootstrap_resultados[i, ] <- muestra_bootstrap
}
return(bootstrap_resultados)
}
bootstrap_separados <- bootstrap_edades(separados_edades, 3999)
bootstrap_casados <- bootstrap_edades(casados_edades, 3999)
bootstrap_solteros <- bootstrap_edades(solteros_edades, 3999)
bootstrap_divorciados <- bootstrap_edades(divorciados_edades, 3999)
bootstrap_viudos <- bootstrap_edades(viudos_edades, 3999)
View(bootstrap_casados)
View(bootstrap_casados)
bootstrap_F <- function(data, n_replicas) {
f_values <- numeric(n_replicas)  # AlmacenarÃ¡ los valores F de cada rÃ©plica
for (i in 1:n_replicas) {
# Muestreamos con reemplazo del ID de la vivienda para mantener la estructura de los datos
sampled_ids <- sample(unique(data$id.vivienda), size = nrow(data), replace = TRUE)
# Creamos una muestra bootstrap
sampled_data <- data %>% filter(id.vivienda %in% sampled_ids)
# Ejecutamos ANOVA en la muestra bootstrap
anova_result <- aov(edad ~ ecivil, data = sampled_data)
# Guardamos el valor F de la ANOVA
f_values[i] <- summary(anova_result)[[1]]["F value"]
}
return(f_values)
}
# NÃºmero de rÃ©plicas bootstrap
n_replicas <- 3999  # Por ejemplo
# Realizamos el bootstrap del estadÃ­stico F
# Primero combinamos todos los datos en un solo dataframe
datos <- bind_rows(
separados %>% mutate(ecivil = "Separado(a)"),
casados %>% mutate(ecivil = "Casado(a)"),
solteros %>% mutate(ecivil = "Soltero(a)"),
divorciados %>% mutate(ecivil = "Divorciado (a)"),
viudos %>% mutate(ecivil = "Viudo(a)")
)
# AsegÃºrate de que ecivil y edad sean las columnas correctas en tu dataframe
# Ahora ejecutamos la funciÃ³n de bootstrap para el estadÃ­stico F
bootstrap_f_values <- bootstrap_F(datos, n_replicas)
# Resultados
# Puedes usar hist() o cualquier otra funciÃ³n de visualizaciÃ³n para ver la distribuciÃ³n de los valores F
hist(bootstrap_f_values, main = "DistribuciÃ³n de valores F Bootstrap", xlab = "Valor F", breaks = 50)
bootstrap_F <- function(data, n_replicas) {
f_values <- numeric(n_replicas)  # AlmacenarÃ¡ los valores F de cada rÃ©plica
for (i in 1:n_replicas) {
# Muestreamos con reemplazo del ID de la vivienda para mantener la estructura de los datos
sampled_ids <- sample(unique(data$id.vivienda), size = length(unique(data$id.vivienda)), replace = TRUE)
# Creamos una muestra bootstrap
sampled_data <- data %>% filter(id.vivienda %in% sampled_ids)
# Ejecutamos ANOVA en la muestra bootstrap
anova_result <- aov(edad ~ ecivil, data = sampled_data)
# Guardamos el valor F de la ANOVA
f_values[i] <- summary(anova_result)[[1]]$`F value`[1]
}
return(f_values)
}
# Realizamos el bootstrap del estadÃ­stico F
bootstrap_f_values <- bootstrap_F(datos, n_replicas)
bootstrap_F <- function(data, n_replicas) {
f_values <- numeric(n_replicas)  # AlmacenarÃ¡ los valores F de cada rÃ©plica
for (i in 1:n_replicas) {
# Muestreamos con reemplazo del ID de la vivienda para mantener la estructura de los datos
sampled_ids <- sample(unique(data$id.vivienda), size = length(unique(data$id.vivienda)), replace = TRUE)
# Creamos una muestra bootstrap
sampled_data <- data %>% filter(id.vivienda %in% sampled_ids)
# Ejecutamos ANOVA en la muestra bootstrap
anova_result <- aov(edad ~ ecivil, data = sampled_data)
# Guardamos el valor F de la ANOVA
f_values[i] <- summary(anova_result)[[1]]$`F value`[1]
}
return(f_values)
}
# Realizamos el bootstrap del estadÃ­stico F
bootstrap_f_values <- bootstrap_F(datos, 3999)
# Datos
library(tidyverse)
library(ggpubr)
datos <- read.csv2("EP08 Datos CASEN 2017.csv", sep = ";", fileEncoding = "latin1")
# Datos
set.seed(691)
# Muestras
separados <- datos %>% filter(ecivil == "Separado(a)")
casados <- datos %>% filter(ecivil == "Casado(a)")
solteros <- datos %>% filter(ecivil == "Soltero(a)")
get_sample_hogares <- function(data) {
data %>%
group_by(id.vivienda) %>%
summarise(edad = first(edad), .groups = 'drop') %>%
sample_n(299)
}
# muestras iguales
separados_sample <- get_sample_hogares(separados)
casados_sample <- get_sample_hogares(casados)
solteros_sample <- get_sample_hogares(solteros)
# lista edades
separados_edades <- separados_sample$edad
casados_edades <- casados_sample$edad
solteros_edades <- solteros_sample$edad
# Comportamiento de datos
instancia <- factor(1:299)
datos_anchos <- data.frame(separados_edades, casados_edades, solteros_edades)
datos_largos <- datos_anchos %>% pivot_longer (c("separados_edades", "casados_edades", "solteros_edades") ,
names_to = " Estado Civil ",
values_to = " Edad ")
datos_largos [[" Estado Civil "]] <- factor ( datos_largos [[" Estado Civil "]])
g <- ggqqplot ( datos_largos , " Edad ", facet.by = " Estado Civil ", color = " Estado Civil ")
g
bootstrap_F <- function(data, n_replicas) {
f_values <- numeric(n_replicas)  # AlmacenarÃ¡ los valores F de cada rÃ©plica
for (i in 1:n_replicas) {
# Muestreamos con reemplazo del ID de la vivienda para mantener la estructura de los datos
sampled_ids <- sample(unique(data$id.vivienda), size = length(unique(data$id.vivienda)), replace = TRUE)
# Creamos una muestra bootstrap
sampled_data <- data %>% filter(id.vivienda %in% sampled_ids)
# Ejecutamos ANOVA en la muestra bootstrap
anova_result <- aov(edad ~ ecivil, data = sampled_data)
# Guardamos el valor F de la ANOVA
f_values[i] <- summary(anova_result)[[1]]$`F value`[1]
}
return(f_values)
}
# NÃºmero de rÃ©plicas bootstrap
n_replicas <- 3999  # Por ejemplo
# Realizamos el bootstrap del estadÃ­stico F
# Primero combinamos todos los datos en un solo dataframe
aaa <- bind_rows(
separados %>% mutate(ecivil = "Separado(a)"),
casados %>% mutate(ecivil = "Casado(a)"),
solteros %>% mutate(ecivil = "Soltero(a)")
)
# AsegÃºrate de que ecivil y edad sean las columnas correctas en tu dataframe
# Ahora ejecutamos la funciÃ³n de bootstrap para el estadÃ­stico F
bootstrap_f_values <- bootstrap_F(aaa, n_replicas)
# Resultados
# Puedes usar hist() o cualquier otra funciÃ³n de visualizaciÃ³n para ver la distribuciÃ³n de los valores F
hist(bootstrap_f_values, main = "DistribuciÃ³n de valores F Bootstrap", xlab = "Valor F", breaks = 50)
# Datos
library(tidyverse)
library(ggpubr)
datos <- read.csv2("EP08 Datos CASEN 2017.csv", sep = ";", fileEncoding = "latin1")
set.seed(234)
# ObtenciÃ³n de los datos
# Filtro por region de Tarapaca
tarapaca <- datos %>% filter(region == "RegiÃ³n de TarapacÃ¡")
# Seleccion de columnas de interes
tarapaca <- tarapaca %>% select(r14, r12b, r12a)
# Filtro para para respuestas de interes
tarapaca <- tarapaca %>% filter(r14 == "SÃ­" | r14 == "No")
# Filtro para para respuestas de interes
tarapaca <- tarapaca %>% filter(r12b == "Profesional (carrera de 4 Ã³ mÃ¡s aÃ±os)" | r12b == "Nunca asistiÃ³")
# Filtro para para respuestas de interes
tarapaca <- tarapaca %>% filter(r12a == "Profesional (carrera de 4 Ã³ mÃ¡s aÃ±os)" | r12a == "Nunca asistiÃ³")
# Se toman 125 muestras
tarapaca <- tarapaca %>% sample_n(150)
auto <- tarapaca %>% filter(r14 == "SÃ­" | r14 == "No")
nunca <- auto %>% filter(r12b == "Nunca asistiÃ³" | r12a == "Nunca asistiÃ³")
profesional <- auto %>% filter(r12b == "Profesional (carrera de 4 Ã³ mÃ¡s aÃ±os)" | r12a == "Profesional (carrera de 4 Ã³ mÃ¡s aÃ±os)")
# comportamiento de datos por chi cuadrado
# Crear una nueva columna 'NivelEducativo' que indique si es tÃ©cnico o profesional
auto <- auto %>%
mutate(NivelEducativo = case_when(
r12b == "Nunca asistiÃ³" | r12a == "Nunca asistiÃ³" ~ "Nunca asistiÃ³",
r12b == "Profesional (carrera de 4 Ã³ mÃ¡s aÃ±os)" | r12a == "Profesional (carrera de 4 Ã³ mÃ¡s aÃ±os)" ~ "Profesional",
TRUE ~ NA_character_ # Excluimos otras respuestas
)) %>%
filter(!is.na(NivelEducativo)) # Filtramos las NA
# Ahora creamos la tabla de contingencia
tabla <- with(auto, table(Auto = r14, Educacion = NivelEducativo))
# Realizamos la prueba de chi-cuadrado
test_chi <- chisq.test(tabla)
# Ver los resultados
print(test_chi)
library(ggplot2)
# ggplot(auto, aes(x = NivelEducativo, fill = r14)) +
#  geom_bar(position = "fill") +
#  labs(y = "ProporciÃ³n", x = "Nivel Educativo", fill = "Posee Auto") +
#  theme_minimal()
print(addmargins(table(auto$r14, auto$NivelEducativo)))
